# A type can have auth rules that specify who can access what data depending
# on claims in a signed JWT.
type User @auth(
    # If an operation (query, add, update, delete) doesn't have an auth rule,
    # then no authorization applies.
    #
    # In this case, there's no 'query' rule, so anyone can query for users and
    # their display names.  We could have constructed a rule like this:
    # query : { or: [ { rule: must-be-this-user }, { rule: "{$role: {eq: \"Admin\"}}" }]}
    # to say that users can only see their own data ... but we'd also need to 
    # allow admin roles to be able to read and write users.

    # Auth rules can be GraphQL rules that link claims in the JWT token to
    # values in the data graph.  See the rule's auth.graphql file for an example
    # that says users can only update their own data.
    update: { rule: must-be-this-user },

    # Auth rules can also be dependent on values in the claims regardless of 
    # data in the graph.  These rule state that the "Admin" claim is
    # required to add a new user (added in the Auth0 post-user-registration hook
    # to allow Auth0 to add new users during the registration flow)
    # or to delete a user.
    add: { rule: "{$role: {eq: \"Admin\"}}" },
    delete: { rule: "{$role: {eq: \"Admin\"}}" }
) {
    # This integration uses the Auth0 user.user_id as the identifier linking the
    # Auth0 user to the Slash GraphQL user.  There's other options, like email,
    # but user.user_id is unique and allows things like multiple sign-in emails,
    # user joining, etc to happen in Auth0 and not affect the Slash GraphQL data.
    userID: String! @id
    displayName: String!

    # Add scalar fields for other properties of the user.
    # e.g.
    # joinDate: DateTime

    # Add fields linking to the user's data
    # e.g.
    # myTasks: Task
}

# Add types for the other data in your app
# type Task { ... }
