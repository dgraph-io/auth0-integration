type User @auth(
    # Auth rules can be GraphQL rules that link claims in the JWT token to
    # values in the data graph.  See the rule's auth.graphql file for an example
    # that says users can only query their own data and are only able to update
    # their own user data.
    query: { rule: must-be-this-user },
    update: { rule: must-be-this-user },

    # Auth rules can also be dependent on values in the claims regardless of 
    # data in the graph.  These rule state that the "Admin" claim is
    # required to add a new user (added in the Auth0 post-user-registration hook
    # to allow Auth0 to add new users during the registration flow)
    # or to delete a user.
    add: { rule: "{$role: {eq: \"Admin\"}}" },
    delete: { rule: "{$role: {eq: \"Admin\"}}" }
) {
    # This integration uses the Auth0 user.user_id as the identifier linking the
    # Auth0 user to the Slash GraphQL user.  There's other options, like email,
    # but user.user_id is unique and allows things like multiple sign-in emails,
    # user joining, etc to happen in Auth0 and not affect the Slash GraphQL data.
    userID: String! @id
    displayName: String!

    # Add scalar fields for other properties of the user.
    # e.g.
    # joinDate: DateTime

    # Add fields linking to the user's data
    # e.g.
    # myTasks: Task
}

# Add types for the other data in your app
# type Task { ... }
